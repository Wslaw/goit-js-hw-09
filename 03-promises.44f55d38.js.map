{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,uBAChCE,EAAYJ,EAAKE,cAAc,sBAC/BG,EAAcL,EAAKE,cAAc,wBA8BvC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OAVgB,IAAIC,SAAQ,CAACC,EAAKC,KAChCC,YAAW,IACLN,EACKI,EAAI,YAAYN,oBAA2BC,SAE3CM,EAAI,YAAYP,oBAA2BC,UAEnDA,EAAM,G,CArCbR,EAAKgB,iBAAiB,UAEtB,SAAmBC,GACjBA,EAAGC,iBACH,MAAMC,EAAeC,OAAOjB,EAAWkB,OACjCC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAAYgB,OAEjC,GAAIG,MAAML,IAAiBK,MAAMF,IAASE,MAAMD,GAG/C,OAFCzB,EAAA2B,OAAOC,QAAQ,iCACfC,QAAQC,IAAI,4BAGf,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAQM,GAAK,EAAE,CACjC,MAAMtB,EAAWsB,EAAI,EACfC,EAAeX,EAAeU,EAAEP,EACtChB,EAAcC,EAAUuB,GACrBC,MAAKC,IACJL,QAAQC,IAAII,GACRlC,EAAA2B,OAAOQ,QAAQ,uBAAqB1B,QAAiBuB,MAAiB,IAE3EI,OAAMC,IACLR,QAAQQ,MAAMA,GACVrC,EAAA2B,OAAOC,QAAQ,sBAAoBnB,QAAiBuB,MAAiB,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('input[name=\"delay\"]');\nconst stepInput = form.querySelector('input[name=\"step\"]');\nconst amountInput = form.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit (ev) {\n  ev.preventDefault();\n  const initialDelay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n   if (isNaN(initialDelay) || isNaN(step) || isNaN(amount)) {\n     Notify.failure('Please enter all number.');\n     console.log('Please enter all number.');\n    return;\n  }\n  for (let i = 0; i < amount; i += 1){\n    const position = i + 1;\n    const currentDelay = initialDelay + i*step;\n    createPromise(position, currentDelay)\n      .then(result => {\n        console.log(result);\n            Notify.success(`✅ Fulfilled promise ${position} in ${currentDelay}ms`);\n      })\n      .catch(error => {\n        console.error(error);\n            Notify.failure(`❌ Rejected promise ${position} in ${currentDelay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((res, rej) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        return res(`Promisen ${position} resolved after ${delay} ms.`)\n      } else {\n        return rej(`Promisen ${position} rejected after ${delay} ms.`)\n      }\n    }, delay);\n    \n  });\n  return promise;\n}\n\n  \n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","addEventListener","ev","preventDefault","initialDelay","Number","value","step","amount","isNaN","Notify","failure","console","log","i","currentDelay","then","result","success","catch","error"],"version":3,"file":"03-promises.44f55d38.js.map"}
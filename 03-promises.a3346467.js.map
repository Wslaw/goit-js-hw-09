{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,kBAChCE,EAAYJ,EAAKE,cAAc,iBAC/BG,EAAcL,EAAKE,cAAc,mBAEvCF,EAAKM,iBAAiB,UAEtB,SAAmBC,G,kBAYf,IAAMC,EAAWC,EAAI,EACfC,EAAeC,EAAeF,EAAEG,GAa1C,SAAuBJ,EAAUK,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OAVgB,IAAIC,SAAQ,SAACC,EAAKC,GAChCC,YAAW,WACT,OAAIN,EACKI,EAAI,YAAuCG,OAA3Bb,EAAS,oBAAwBa,OAANR,EAAM,SAEjDM,EAAI,YAAuCE,OAA3Bb,EAAS,oBAAwBa,OAANR,EAAM,Q,GAEzDA,E,KArBHS,CAAcd,EAAUE,GACrBa,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACR1B,EAAA6B,OAAOC,QAAQ,uBAAwCP,OAAfb,EAAS,QAAmBa,OAAbX,EAAa,M,IAEzEmB,OAAM,SAAAC,GACLL,QAAQK,MAAMA,GACVhC,EAAA6B,OAAOI,QAAQ,sBAAuCV,OAAfb,EAAS,QAAmBa,OAAbX,EAAa,M,KApB7EH,EAAGyB,iBACH,IAAMrB,EAAesB,OAAO9B,EAAW+B,OACjCtB,EAAOqB,OAAO7B,EAAU8B,OACxBC,EAASF,OAAO5B,EAAY6B,OAEjC,GAAIE,MAAMzB,IAAiByB,MAAMxB,IAASwB,MAAMD,GAG/C,OAFCrC,EAAA6B,OAAOI,QAAQ,iCACfN,QAAQC,IAAI,4BAGf,IAAK,IAAIW,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('[name=\"delay\"]');\nconst stepInput = form.querySelector('[name=\"step\"]');\nconst amountInput = form.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit (ev) {\n  ev.preventDefault();\n  const initialDelay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n   if (isNaN(initialDelay) || isNaN(step) || isNaN(amount)) {\n     Notify.failure('Please enter all number.');\n     console.log('Please enter all number.');\n    return;\n  }\n  for (let i = 0; i < amount; i += 1){\n    const position = i + 1;\n    const currentDelay = initialDelay + i*step;\n    createPromise(position, currentDelay)\n      .then(result => {\n        console.log(result);\n            Notify.success(`✅ Fulfilled promise ${position} in ${currentDelay}ms`);\n      })\n      .catch(error => {\n        console.error(error);\n            Notify.failure(`❌ Rejected promise ${position} in ${currentDelay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((res, rej) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        return res(`Promisen ${position} resolved after ${delay} ms.`)\n      } else {\n        return rej(`Promisen ${position} rejected after ${delay} ms.`)\n      }\n    }, delay);\n    \n  });\n  return promise;\n}\n\n  \n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","ev","position","i","currentDelay","initialDelay","step","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","concat","$ce04d3a99e08e73b$var$createPromise","then","result","console","log","Notify","success","catch","error","failure","preventDefault","Number","value","amount","isNaN","i1","_loop"],"version":3,"file":"03-promises.a3346467.js.map"}